name: Build and Push to ECR

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.yaml'
      - '**/*.yml'
      - '.github/workflows/deploy.yml'
      
env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: webapp-prod-app
  CONTAINER_PORT: 8080
  PROJECT_NAME: webapp
  ENVIRONMENT: prod

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push application image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          # Push the image to ECR with commit hash tag
          echo "Pushing image with tag: $IMAGE_TAG"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Also tag as latest and push
          echo "Tagging and pushing as latest..."
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          # Output the image URI for subsequent steps
          echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
          echo "✅ Image pushed successfully: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Wait for ECR propagation
        run: |
          echo "Waiting for ECR image to propagate..."
          sleep 30

      - name: Check if CodePipeline exists and trigger
        run: |
          # Check if the pipeline exists
          if aws codepipeline get-pipeline --name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-pipeline --region ${{ env.AWS_REGION }} > /dev/null 2>&1; then
            echo "✅ CodePipeline found. Triggering deployment..."
            
            # Trigger the CodePipeline execution
            EXECUTION_ID=$(aws codepipeline start-pipeline-execution \
              --name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-pipeline \
              --region ${{ env.AWS_REGION }} \
              --query 'pipelineExecutionId' \
              --output text)
            
            echo "🚀 CodePipeline execution started with ID: $EXECUTION_ID"
            echo "📊 You can monitor the deployment at: https://${{ env.AWS_REGION }}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-pipeline/view"
          else
            echo "⚠️ CodePipeline not found. Skipping deployment trigger."
            echo "💡 The image has been built and pushed successfully to ECR."
            echo "🔧 Deploy the pipeline first using the CloudFormation templates when ready."
          fi

      - name: Output deployment info
        run: |
          echo "🎯 Deployment Summary:"
          echo "📦 Image: ${{ env.IMAGE_URI }}"
          echo "🏷️  Tag: ${{ github.sha }}"
          echo "🚀 Pipeline: ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-pipeline"
          echo "🌐 Region: ${{ env.AWS_REGION }}"